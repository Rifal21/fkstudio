name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install cloudflared
        run: |
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o /usr/local/bin/cloudflared
          chmod +x /usr/local/bin/cloudflared
          cloudflared --version

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          # Gunakan echo dengan flag -e untuk menangani newlines
          echo -e "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          # Tambahkan known hosts untuk kedua hostname
          ssh-keyscan -H ssh.fkstudio.my.id >> ~/.ssh/known_hosts

      - name: Debug SSH Key
        run: |
          echo "SSH key content (first few lines):"
          head -n 5 ~/.ssh/id_ed25519
          echo "Key file permissions:"
          ls -la ~/.ssh/id_ed25519
          echo "Known hosts:"
          cat ~/.ssh/known_hosts

      - name: Test Cloudflare Connection
        run: |
          cloudflared access ssh --hostname ssh.fkstudio.my.id || echo "Cloudflare test completed"

      - name: Test SSH via Cloudflare
        run: |
          ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
              -i ~/.ssh/id_ed25519 \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=30 \
              -v \
              webserver@ssh.fkstudio.my.id whoami

      - name: Deploy Laravel via Cloudflare Tunnel
        run: |
          ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
              -i ~/.ssh/id_ed25519 \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=30 \
              webserver@ssh.fkstudio.my.id << 'EOF'
            set -e
            echo "Starting deployment..."
            cd /var/www/fkstudio
            echo "Current directory: $(pwd)"
            echo "Git status before:"
            git status
            git fetch origin main
            git reset --hard origin/main
            echo "Git status after:"
            git status
            composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
            php artisan migrate --force
            php artisan optimize:clear
            echo "Deployment completed successfully!"
          EOF